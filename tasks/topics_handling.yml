---
# Low level topic operations - using Confluent Server v3 API
# create topic expects collection to topic configs, returns success for already existing topics
- name: Create topics
  uri:
    url: "{{res_server_url}}/kafka/v3/clusters/{{cluster_id}}/topics"
    method: POST
    validate_certs: false
    force_basic_auth: true
    url_username: "{{rest_user}}"
    url_password: "{{rest_user_password}}"
    headers:
      Content-Type: application/json
    body_format: json
    body: "{{item | to_json | from_json}}"
    return_content: yes
  register: result
  failed_when: result.status != 201 and result.json.error_code|int != 40002
  loop: "{{topics_in |flatten(levels=1)}}"
  when: 
    - not ansible_check_mode
    - topic_command == "create"

- name: Update topics
  uri:
    url: "{{res_server_url}}/kafka/v3/clusters/{{cluster_id}}/topics/{{item.topic_name}}/configs:alter"
    method: POST
    validate_certs: false
    force_basic_auth: true
    url_username: "{{rest_user}}"
    url_password: "{{rest_user_password}}"
    headers:
      Content-Type: application/json
    body_format: json
    body: >
      {
        "data" :{{item.configs| to_json | from_json}}
      }
    status_code: 204
  loop: "{{ topics_in |flatten(levels=1) }}"
  when: 
    - not ansible_check_mode
    - topic_command == "update"

# delete reports success for topics that do not exist
- name: Delete Topics
  uri:
    url: "{{res_server_url}}/kafka/v3/clusters/{{cluster_id}}/topics/{{item.topic_name}}"
    method: DELETE
    validate_certs: false
    force_basic_auth: true
    url_username: "{{rest_user}}"
    url_password: "{{rest_user_password}}"
  register: result
  failed_when: result.status != 204 and result.json.error_code|int != 40403
  loop: "{{topics_in |flatten(levels=1)}}"
  when: 
    - not ansible_check_mode
    - topic_command == "delete"
    - topic_delete_enabled

- name: Add partitions
# not supported via REST API yet - needs direct call to Kafka Admin API
  shell: |
    {{ binary_base_path }}/bin/kafka-topics --bootstrap-server {{inventory_hostname}}:{{kafka_broker_listeners[kafka_broker_inter_broker_listener_name]['port']}} \
      --alter --topic {{ item.topic_name }} --partitions {{ item.partitions_count }} --command-config {{kafka_broker.client_config_file}}
  environment:
    CONFLUENT_SECURITY_MASTER_KEY: "{{ secrets_protection_masterkey }}"
  register: topics_result
  # stdout_lines will have topics with URPs and stderr has WARN and ERROR level logs
  until: topics.stdout_lines|length == 0 and 'ERROR' not in topics.stderr
  changed_when: "topics_result.rc == 0"
  check_mode: false
  loop: "{{topics_in |flatten(levels=1)}}"
  when: 
    - not ansible_check_mode
    - topic_command == "partitions"
    - topic_partitions_enabled

# - name: test
#   debug: msg="Item0>{{item.0.topic_name}}<:Item1>{{item.1.name}}:{{item.1.value}}<"
#   loop: "{{ topics | subelements('configs') }}"
